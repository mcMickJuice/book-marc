# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

 config.vm.provision "docker" do |d|
    d.run "mongo", args: "-p 27017:27017", name: "mongodb"
    # d.run "davidkelley/riemann", args: "-p 5555:5555 -p 5555:5555/udp -p 5556:5556", name: "riemann"
    # d.run "davidkelley/riemann-dash", args: "-p 4567:4567", name: "riemann-dash"
  end

  config.vm.network "private_network", ip: "192.168.33.40"
  config.vm.network :forwarded_port, guest:27017, host: 27017

  # config.vm.network :forwarded_port, guest: 5432, host: 5432

  # config.vm.define "postgres" do |v|
  #   v.vm.provider "docker" do |d|
  #     d.image = "paintedfox/postgresql"
  #     d.ports = ["5432:5432"]
  #     d.env = {
  #       USER: "root",
  #       PASS: "123Fake",
  #       DB: "root"
  #     }
  #   end
  # end

# sudo docker run -d --name="postgresql" -p 127.0.0.1:5432:5432 -v /tmp/postgresql:/data -e USER="super" -e DB="database_name" -e PASS="123Fake" paintedfox/postgresql

  # config.vm.provision "docker" do |d|
  #   d.run "postgres", name: "postgres", args: "-e POSTGRES_USER=\"super\" -e POSTGRES_PASSWORD=\"123Fake\""
  # end

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "512"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
  SHELL
end
